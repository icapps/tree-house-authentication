import * as fs from 'fs';
import * as httpMocks from 'node-mocks-http';
import { createLoginRequest, createIdentityProvider, createServiceProvider, parseSAMLResponse, createLogout } from '../src/lib/saml-authentication';
import { serviceProviderConfig } from '../src/config/saml.config';

const idpMetaData = fs.readFileSync(`${__dirname}/_helpers/idp-metadata.xml`, 'utf-8');
const spMetaData = serviceProviderConfig(
  'http://10.0.190.76:3000',
  'http://10.0.190.76:3000/verify',
  { expirationDate: '2040-01-18T00:00:00Z' },
  );

const identityProvider = createIdentityProvider(idpMetaData);
const serviceProvider = createServiceProvider(spMetaData);

describe('saml-authentication', () => {
  describe('createLoginRequest', async () => {
    it('should create a login request', () => {
      const request = createLoginRequest(serviceProvider, identityProvider);

      expect(request).toContain('http://localhost:8080/simplesaml/saml2/idp/SSOService.php?SAMLRequest=');
    });

    describe('parseSAMLResponse', () => {
      // TODO: fix this test
      it('Should parse loginResponse', async () => {
        // tslint:disable-next-line:max-line-length
        const response = '';
        const expected = {
          uid: 1, eduPersonAffiliation: 'group1', email: 'user1@example.com', preferredLanguage: 'en',
        };
        const request = httpMocks.createRequest({
          method: 'POST',
          body: {
            SAMLResponse: response,
          },
        });

        serviceProvider.parseLoginResponse = jest.fn().mockReturnValueOnce(expected);

        const parsed =  await parseSAMLResponse(serviceProvider, identityProvider, request);
        expect(parsed).toEqual(expected);
      });
    });

    describe('createLogout', () => {
      it('Should create a valid logout URL', async () => {
        const logout = await createLogout(serviceProvider, identityProvider, '', 'https://www.icapps.com');

        expect(logout.context).toContain('http://localhost:8080/simplesaml/saml2/idp/SingleLogoutService.php?SAMLRequest=');
        expect(logout.context).toContain('RelayState=https%3A%2F%2Fwww.icapps.com');
      });
    });
  });
});
